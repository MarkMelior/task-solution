import { describe, it, expect, beforeAll } from 'vitest';

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
 * @template TArg - –¢–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @template TResult - –¢–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
interface TestCase<TArg, TResult> {
  /** –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ */
  input: TArg;
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  expected: TResult;
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
 */
interface PerformanceOptions {
  /** –í–∫–ª—é—á–∏—Ç—å –∑–∞–º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
  showPerformance?: boolean;
}

/** –†–∞–∑–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */
const COMPLEXITY_TEST_SIZES = [10, 100, 1000, 10000] as const;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞–º–∏.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
 *
 * @template TArg - –¢–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * @template TResult - –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
 *
 * @param funcs - –ú–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param cases - –ú–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 * @param options - –û–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 *
 * @example
 * ```typescript
 * tFn(
 *   [removeDublicationCustom, removeDublicationShort],
 *   [{ input: [1, 2, 2, 3], expected: [1, 2, 3] }],
 *   { showPerformance: true }
 * );
 * ```
 */
export const tFn = <TArg, TResult>(
  funcs: Array<(input: TArg) => TResult>,
  cases: readonly TestCase<TArg, TResult>[],
  options: PerformanceOptions = {}
) => {
  const { showPerformance = false } = options;

  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å—Ä–∞–∑—É
  if (showPerformance && cases.length > 0) {
    beforeAll(() => {
      funcs.forEach((fn) => {
        const name = fn.name || 'anonymous';
        analyzeComplexity(fn, cases[0].input, name);
      });
    });
  }

  funcs.forEach((fn, index) => {
    const name = fn.name || `fn${index + 1}`;

    describe(name, () => {
      // –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      cases.forEach(({ input, expected }) => {
        const label = JSON.stringify(input);
        it(`${label} ‚Üí ${JSON.stringify(expected)}`, () => {
          expect(fn(input)).toEqual(expected);
        });
      });
    });
  });
};

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞—è –µ—ë –Ω–∞ –º–∞—Å—Å–∏–≤–∞—Ö —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 * –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Ä–æ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–æ—Å—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
 *
 * @param fn - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param sampleInput - –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
 * @param name - –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function analyzeComplexity<TArg, TResult>(
  fn: (input: TArg) => TResult,
  sampleInput: TArg,
  name: string
): void {
  const timings: number[] = [];

  // –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  COMPLEXITY_TEST_SIZES.forEach((size) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π input –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ sampleInput
    let largeInput: TArg;

    if (Array.isArray(sampleInput)) {
      // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      largeInput = Array.from({ length: size }, (_, i) => i % (size / 2)) as TArg;
    } else if (typeof sampleInput === 'string') {
      // –î–ª—è —Å—Ç—Ä–æ–∫: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏
      largeInput = Array.from({ length: size }, (_, i) => String.fromCharCode(97 + (i % 26))).join(
        ''
      ) as TArg;
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π input
      largeInput = sampleInput;
    }

    const start = performance.now();
    fn(largeInput);
    const elapsed = performance.now() - start;

    timings.push(elapsed);
  });

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ —Ä–æ—Å—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  const timeRatio = timings[timings.length - 1] / timings[0];
  const sizeRatio =
    COMPLEXITY_TEST_SIZES[COMPLEXITY_TEST_SIZES.length - 1] / COMPLEXITY_TEST_SIZES[0];

  console.log(`üìà ${name}: ${timeRatio.toFixed(2)}x (size: ${sizeRatio}x)`);
}
